<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title></title>
	<meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=10">
	<!--样式-->
	<link href="src/static/Skins/Spring/style.css" rel="stylesheet" type="text/css" />
	<link href="src/static/Scripts/jquery-easyui-1.3.5/themes/default/easyui.css" rel="stylesheet" type="text/css" />
	<link href="src/static/Scripts/CRUD/Skins/Default/skin.css" rel="stylesheet" type="text/css" />
	<link rel="stylesheet" type="text/css" href="src/static/zTree_v3/css/zTreeStyle/zTreeStyle.css" />
	<link href="src/static/Scripts/Divs/CSS/divs.css" rel="stylesheet" type="text/css" />
	<link href="src/static/Scripts/Quick/Skins/Default/skin.css" rel="stylesheet" type="text/css" />
	<link href="src/static/Scripts/Report/Skins/Default/skin.css" rel="stylesheet" type="text/css" />
	<link href="src/static/Scripts/Realtime/Skins/Default/skin.css" rel="stylesheet" type="text/css" />
	<!--脚本-->
	<script src="src/static/Scripts/jquery-1.11.1.min.js" type="text/javascript"></script>
	<script src="src/static/Scripts/template.min.js" type="text/javascript"></script>
	<script src="src/static/Scripts/jquery.linq.min.js" type="text/javascript"></script>
	<script src="src/static/Scripts/jquery-easyui-1.3.5/jquery.easyui.min.js" type="text/javascript"></script>
	<script src="src/static/Scripts/jquery-easyui-1.3.5/locale/easyui-lang-zh_CN.js" type="text/javascript"></script>
	<script src="src/static/Scripts/jquery-easyui-1.3.5/scrollviewEx.js" type="text/javascript"></script>
	<script src="src/static/Scripts/jquery-easyui-1.3.5/datagrid-cellediting.js" type="text/javascript"></script>
	<script type='text/javascript' src='src/static/zTree_v3/js/jquery.ztree.all-3.5.min.js'></script>
	<script type='text/javascript' src='src/static/zTree_v3/js/jquery.ztree.exhide-3.5.min.js'></script>
	<script src="src/static/Scripts/highstock/highstock.js" type="text/javascript"></script>
	<script src="src/static/Scripts/highchart/modules/exporting.js" type="text/javascript"></script>
	<script src="src/static/Scripts/My97DatePicker/WdatePicker.js" type="text/javascript"></script>
	<script src="src/static/Scripts/MyDialog/MyDialog.js" type="text/javascript"></script>
	<script src="src/static/Scripts/Lib.js" type="text/javascript"></script>
	<script src="src/static/Scripts/CRUD/CRUD.Core.js" type="text/javascript"></script>
	<script src="src/static/Scripts/CRUD/CRUD.View.js" type="text/javascript"></script>
	<script src="src/static/Scripts/CRUD/CRUD.Behavior.js" type="text/javascript"></script>
	<script src="src/static/Scripts/CRUD/CRUD.Service.js" type="text/javascript"></script>
	<script src="src/static/Scripts/Quick/Quick.js" type="text/javascript"></script>
	<script src="src/static/Scripts/Divs/jquery.divs.js" type="text/javascript"></script>
	<script src="src/static/Scripts/Grid/Grid.js" type="text/javascript"></script>
	<script src="src/static/Scripts/Loading/Loading.js" type="text/javascript"></script>
	<script src="src/static/Scripts/PopWin/PopWin.js" type="text/javascript"></script>
	<script src="src/static/Scripts/Printer/Printer.js" type="text/javascript"></script>
	<script src="src/static/Scripts/Report/Report.Core.js" type="text/javascript"></script>
	<script src="src/static/Scripts/Realtime/Realtime.Core.js" type="text/javascript"></script>
	<script src="src/static/Scripts/Chart/Chart.js" type="text/javascript"></script>
</head>
<body>
	<style>
		.container
		{
			width: 100%;
			height: 100%;
		}
	</style>
	<div class="container"></div>
	<script>
	jQuery(document).ready(function ()
	{
	    var CRUD_Handler = jQuery.CRUD('.container',
		{
		    View:
			{
			    BeforeRender: function (View, Buttons)
			    {
			        /* 重新设置列定义,可以根据列的field值进行索引。
			        View.Column["f_1"].formatter = function(value, row, index)
			        {
			        var text = "<font color='#f86004'>禁用</font>";
			        if(value == 1) text = "<font color='#009970'>启用</font>";
			        return text;
			        };//*/
			    },
			    AfterRender: function ()
			    {
			        //设置按钮状态，提供了统一的操作方法，参数中可以传入按钮功能代码的字符串或字符串数组，如果是数组同时设置多个按钮状态。
			        this.Button.Hide(["column", "export"]); //Hide\Show\Disable\Enable\Highlight\Normal

			        //添加动态属性
			        this.FormContainer.find("td.label.blank:eq(0)").html("动态属性");
			        this.FormContainer.find("td.content.blank:eq(0)").html("<div class=\"wrap\"><input class=\"easyui-validatebox default \" field=\"f_dt\" valuetype=\"Number\" showtype=\"text\" type=\"text\" validator=\"{Valids:{regexp:['必须为数值','^[\\-\\+]?([0-9]+(\\.[0-9]+)?)?$']},Message:'基础属性 3'}\" disabled=\"disabled\"><div class=\"border border-with-text\"><span class=\"unit\">m³</span></div></div>");

			        this.FormContainer.find("td.label.blank:eq(1)").html("动态属性2");
			        this.FormContainer.find("td.content.blank:eq(1)").html("<input type='text' id='txt' disabled='disabled'/>");
			        jQuery(".custom_container").height(200).css("background-color", "red").html("xx");
			    },
			    Form:
				{
				    BeforeEnable: function (Fields)
				    {//暂时没有使用过
				    },
				    AfterEnable: function ()
				    {//表单部分启用编辑后执行的逻辑
				        jQuery("#txt").removeAttr("disabled");
				    },
				    BeforeDisable: function (Fields)
				    {//暂时没有使用过
				    },
				    AfterDisable: function ()
				    {//表单部分禁用编辑后执行的逻辑
				        jQuery("#txt").attr("disabled", "disabled");
				    },
				    BeforeClear: function (Fiels)
				    {//暂时没有使用过
				    },
				    AfterClear: function ()
				    {//清空表单后自行的逻辑
				        jQuery("#txt").val("");
				    },
				    BeforeSet: function (Record, IsNew)
				    {//设置表单前执行的逻辑，一般用于数据记录预处理
				        if (IsNew)
				        {//新建时
				            Record.txt = "初始值";
				        }
				    },
				    AfterSet: function (Record, IsNew)
				    {//设置表单后执行的逻辑
				        jQuery("#txt").val(Record.txt);
				    },
				    BeforeGet: function (Record, IsNew, Validates)
				    {//暂时没有使用过
				    },
				    AfterGet: function (Record, IsNew, Validates)
				    {//获取表单后执行的逻辑，一般用于补充字段值的获取
				        Record.txt = jQuery("#txt").val();
				        if (Record.txt.length == 0)//手工验证并增加验证失败提示信息
				        {
				            Validates.push("<span style='color:red;'>动态属性2</span>为必填项");
				        }
				    }
				},
			    GridOptions: { pageSize: 50 }, //表格扩展配置，符合EasyUI中datagrid的配置格式
			    Pagination: { displayMsg: ""}//分页设置，符合EasyUI分页组件配置格式
			},
		    Behavior:
			{
			    AutoInsert: true, //是否自动连续添加
			    Grid:
				{
				    BeforeRowClick: function (Row, Index)
				    {//暂时没有使用过
				    },
				    AfterRowClick: function (Row, Index)
				    {
				        //行点击后事件
				        alert(Row.f_1);
				    },
				    RowDblClick: function (Row)
				    {
				        //行双击事件，如果没有定义则执行修改按钮点击事件
				    },
				    BeforeExport: function (Records, Content, Fields)
				    {
				        //导出前事件, 在表体前附加导出文件表头，表号，日期等额外内容
				        return ["<tr><td colspan='", Fields.length, "' style='text-align:center;height: 30px;'>阀门调节日报</td></tr>"];
				    }
				},
			    Button:
				{
				    BeforeClick: function (Command)
				    {//按钮点击前执行的逻辑
				        //Command: reset\filter\order\column\insert\update\delete\export
				        if (Command == "insert")
				        {//点击添加按钮前执行

				        }
				    }
				},
			    BeforeQuery: function (Filters, Orders)
			    {//查询前执行逻辑，一般用于修改过滤和排序条件，也可以通过返回false终止本次查询
			        Filters.Clear(["f_2", "f_3"]); //清除过滤条件，如果不传参数则全部清除。

			        Filters.Merge([{ Field: "f_1", Operate: "=", Value: "xxx", Relation: "and"}]); //附加额外过滤条件


			        Orders.Clear(); //清除排序条件，类似过滤条件
			        Orders.Merge([{ Field: "f_1", Type: false}]); //附加额外排序条件。

			        return true; //true：继续查询；false：中止查询，不会发送请求。
			    },
			    AfterQuery: function (Result)
			    {//查询后执行的逻辑，一般用于修改返回结果，对返回结果进行预处理。也可以通过返回false放弃数据显示。
			        //if(Result.total > 0)
			        //{
			        //	Cid = Result.rows[0]._id;
			        //	setTimeout(function() { CRUD_Customer.View.Grid.Element.datagrid("selectRow", 0); }, 300);
			        //}
			        //else
			        //{
			        //	Cid = null;
			        //}
			        //jQuery("button[command=query]").trigger("click");

			        return true; //true：继续查询；false：中止查询，查询结果不会更新到datagrid中。
			    },
			    BeforeSave: function (Record, Callback)
			    {//保存前执行逻辑，一般用于给记录附加通用属性。也可以通过返回false终止本次保存
			        Record.cid = "CID";
			        if (Record.cid == "CID")
			        {
			            return true; //继续保存。
			        }
			        else
			        {
			            return false; //中止保存。
			        }
			        //如果执行异步逻辑，使用Callback(true/false)方式
			    },
			    AfterSave: function (Result)
			    {//保存后执行逻辑
			        CRUD_Handler.View.Grid.Query(); //以当前参数重新查询datagrid数据。

			        return Result.Code == 0; //true：继续；false：中止，但记录已经保存到数据库。
			    },
			    BeforeDelete: function (Record)
			    {//删除前执行逻辑，一般是判断记录是否可删除，可以返回false终止本次删除。
			        var Node = Tree.getNodeByParam('id', Record._id);
			        if (Node && Node.children && Node.children.length)
			        {
			            CRUD_Handler.View.ShowMessage("分区下存在子分区，不能删除");
			            return false; //中止删除。
			        }
			        else if (CRUD_Handler.View.Grid.Element.datagrid("getRows").length > 0)
			        {
			            CRUD_Handler.View.ShowMessage("分区下存在站点，不能删除");
			            return false; //中止删除。
			        }
			        else
			        {
			            return true; //继续删除。
			        }
			    },
			    AfterDelete: function (Result)
			    {//删除后执行逻辑，一般是执行删除后的一些关联对象清理。可以返回false终止后续逻辑。
			        if (Result.Code == 0 && Tree)
			        {
			            var node = Tree.getNodeByParam('id', DCRUD.View.Grid.CurrentRow._id);
			            Tree.removeNode(node);
			        }
			        //清除datagrid记录
			        CRUD_Handler.View.Grid.Clear();

			        return Result.Code == 0; //true：继续，false：中止（数据库中记录已删除）；
			    }
			},
		    Service: { Base: "../", Path: "biz/", Target: "target"}//接口路径定义，Base + Path + Target
		},
		{
		    Layout: "TB", //布局方式。TB：Form在下边\LR：Form在右侧\POP：Form为弹出框
		    Upsert: true,
		    Bindings: //下拉框数据源
			[
				{
				    Code: "Type", //数据源代码
				    Records: [{ name: "type name", value: "type value"}]//数据源记录
				},
				{ Code: "BD", Records: [{ name: "name1", value: "val1" }, { name: "name2", value: "val2"}] },
				{ Code: "Tree", Records: [{ id: "id1", text: "node1", children: [{ id: "id3", text: "node3", children: []}] }, { id: "id2", text: "node2", children: []}] }
			],
		    FrozenColumns: //固定列定义
			[
				[
					{ title: "基础属性", halign: "center", align: "center", colspan: 4 }
				],
				[
					{ title: "基础属性 1", field: "f_1", width: 100, halign: "center", align: "center" },
					{ title: "基础属性 2", field: "f_2", width: 100, halign: "center", align: "center" },
					{ title: "基础属性 3", field: "f_3", width: 100, halign: "center", align: "center" },
					{ title: "基础属性 4", field: "f_4", width: 100, halign: "center", align: "center" }
				]
			],
		    Columns: //列定义
			[
				[

					{ title: "扩展属性", halign: "center", align: "center", colspan: 4 },
					{ title: "备注信息", field: "f_13", width: 100, halign: "center", align: "center", rowspan: 2 }
				],
				[
					{ title: "扩展属性 1", field: "f_7", width: 100, halign: "center", align: "center" },
					{ title: "扩展属性 2", field: "f_8", width: 100, halign: "center", align: "center" },
					{ title: "扩展属性 3", field: "f_9", width: 100, halign: "center", align: "center" },
					{ title: "扩展属性 4", field: "f_10", width: 100, halign: "center", align: "center" }
				]
			],
		    Form: //表单定义
			[
				{
				    Code: "Base",
				    Title: "基础属性",
				    Inputs:
					[
						[
							{
							    Name: "基础属性 1", //字段中文名，显示为文本标签
							    Field: "f_1", //字段名
							    Required: true, //是否必填项
							    DataType: "String", //数据类型：String、Number、Phone、EMail、IP
							    ShowType: "text", //显示类型：text、combo、combotree、combocheck、checkbox、datetime、upload、password、textarea
							    Ext: "color:red;", //扩展：combo、combotree、combocheck时填写数据源代码；text、textarea时可填写样式设置；upload时可填写后缀名集合；datetime时填写日期时间格式yyyy-MM-dd HH:mm:ss。
							    MaxLength: "20", //text时填写文本最大长度。
							    Unit: "", //单位
							    Validate: "{Valids:{regexp:['必须包含数字','^[0-9a-zA-Z]*[0-9]+[0-9a-zA-Z]*$']},Message:'密码'}", //自定义验证
							    Editable: true, //是否可编辑，默认值true
							    RowSpan: 1,
							    ColSpan: 1
							},
							{ Name: "基础属性 2", Field: "f_2", Required: false, DataType: "EMail", ShowType: "text", Ext: "", RowSpan: 1, ColSpan: 1 }
						],
						[
							{ Name: "基础属性 3", Field: "f_3", Required: false, DataType: "Number", ShowType: "text", Ext: "", Unit: "m³", RowSpan: 1, ColSpan: 1 },
							{ Name: "基础属性 4", Field: "f_4", Required: false, DataType: "Phone", ShowType: "text", Ext: "", RowSpan: 1, ColSpan: 1 }
						],
						[
							{ Name: "基础属性 5", Field: "f_5", Required: false, DataType: "Number", ShowType: "datetime", Ext: "yyyy-MM-dd HH:mm:ss", RowSpan: 1, ColSpan: 1 },
							{ Name: "基础属性 6", Field: "f_6", Required: false, DataType: "String", ShowType: "datetime", Ext: "yyyy-MM-dd", RowSpan: 1, ColSpan: 1 },
						]
					]
				},
				{
				    Code: "Extend",
				    Title: "扩展属性",
				    Inputs:
					[
						[
							{ Name: "扩展属性 1", Field: "f_7", Required: false, DataType: "String", ShowType: "password", Ext: "", Validate: "{Valids:{regexp:['必须包含数字','^[0-9a-zA-Z]*[0-9]+[0-9a-zA-Z]*$']},Message:'密码'}", RowSpan: 1, ColSpan: 1 },
							{ Name: "扩展属性 2", Field: "f_8", Required: false, DataType: "String", ShowType: "upload", Ext: "", RowSpan: 1, ColSpan: 1 }
						],
						[
							{ Name: "扩展属性 3", Field: "f_9", Required: true, DataType: "String", ShowType: "combo", Ext: "Type", RowSpan: 1, ColSpan: 1 },
							{ Name: "扩展属性 4", Field: "f_10", Required: false, DataType: "String", ShowType: "combocheck", Ext: "BD", RowSpan: 1, ColSpan: 1 }
						],
						[
							{ Name: "扩展属性 5", Field: "f_11", Required: false, DataType: "String", ShowType: "combotree", Ext: "Tree", RowSpan: 1, ColSpan: 1 },
							{ Name: "扩展属性 6", Field: "f_12", Required: false, DataType: "Number", ShowType: "checkbox", Ext: "", RowSpan: 1, ColSpan: 1 }
						],
						[
							{},
							{}
						]
					]
				},
				{
				    Title: "备注信息",
				    Inputs:
					[
						[
							{ Name: "备注信息", Field: "f_13", Required: false, DataType: "String", ShowType: "textarea", Ext: "width: 400px;", RowSpan: 1, ColSpan: 2 }
						]
					]
				}
			],
		    Properties:
			[
				{ Name: "", Field: "cid", Unique: 1, DataType: "String", ShowType: "text", Ext: "", FilterEnabled: false, OrderEnabled: false },
				{ Name: "基础属性 1", Field: "f_1", Unique: 1, DataType: "String", ShowType: "text", Ext: "", FilterEnabled: true, OrderEnabled: true },
				{ Name: "基础属性 2", Field: "f_2", Unique: 0, DataType: "String", ShowType: "text", Ext: "", FilterEnabled: true, OrderEnabled: true },
				{ Name: "基础属性 3", Field: "f_3", Unique: 0, DataType: "String", ShowType: "text", Ext: "", FilterEnabled: true, OrderEnabled: true },
				{ Name: "基础属性 5", Field: "f_5", Unique: 0, DataType: "Number", ShowType: "datetime", Ext: "yyyy-MM-dd HH:mm:ss", FilterEnabled: true, OrderEnabled: true },
				{ Name: "基础属性 6", Field: "f_6", Unique: 0, DataType: "String", ShowType: "datetime", Ext: "yyyy-MM-dd", FilterEnabled: true, OrderEnabled: true }
			],
		    Quicks:
			[
				{ Type: "QText", Label: "基础属性 1", Field: "f_1" },
				{ Type: "QDatetimeRange", Label: "基础属性 5：", Seperator: "至", Field: "f_5", Ext: "{Format: \"yyyy-MM-dd HH:mm:ss\"}" },
				{ Type: "QDatetime", Label: "基础属性 6：", Field: "f_6", Ext: "{Format: \"yyyy-MM-dd\"}" }
			],
		    Rights: "CUD", //增删改按钮权限设置，C：增加；U：修改；D：删除。
		    Target: "target",
		    Title: "增删改查",
		    ExportName: "增删改查"
		});
	});
	</script>
</body>
</html>
<script>
/*/后端
1、定义数据表
# 水表录入
repairdata = comm.CRUD(ctx.cmdb, 'rizhao_data') #定义数据表
repairdata.inject(repair, 'repair', 'rid', False) #根据rid字段从repair表中注入一个repair对象。

2、定义页面和增删改查接口
@path("/ubiz/repair.html") #定义页面路径
class UBizRepair:
    
    def GET(self):
        
        return render_biz["repair"]()

@wildcard('/ubiz/repair/') #定义增删改查接口
class UBizRepairCRUD(CRUD):
  
    def __init__(self):
        self.module = service.biz.repair

#以ddefs表中的sensors字段作为记录集的增删改查接口定义方式
@wildcard("/ubiz/ddef/sensors/") 
class UBizDdefRecord(ArrayCRUD):
  
  def __init__(self):
    
    self.module = service.biz.ddefs 
    self.array = 'sensors' #指定作为数据集的字段名。

3、给数据表附加逻辑
def repair_on_upsert(_id,n,old):
    #附加逻辑

repairdata.on_upsert += repair_on_upsert
//*/
</script>
